package com.creditease.ns4.gear.watchdog.jmx.test;import com.creditease.ns4.gear.watchdog.jmx.Hello;import com.creditease.ns4.gear.watchdog.monitor.jmx.server.service.WatchDogService;import com.sun.jdmk.comm.HtmlAdaptorServer;import javax.management.*;import javax.management.remote.*;import java.io.File;import java.io.IOException;import java.lang.management.ManagementFactory;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.net.MalformedURLException;import java.net.URL;import java.net.URLClassLoader;import java.rmi.registry.LocateRegistry;import java.util.Properties;import java.util.Scanner;/** * @author * @description * @date 2019/3/1 */public class Server {    //VM    private static ClassLoader JVMToolClassloader = null;    private static Class<?> virtualMachine;    private static Method method_AttachToVM;    private static Method method_DetachFromVM;    private static Method method_GetAgentProperties;    private static Method method_GetSystemProperties;    private static Method method_LoadAgent;    private static Method method_StartLocalManagementAgent;    static {        String javaHome = System.getProperty("java.home");        String javaVersion = System.getProperty("java.version");        try {            JVMToolClassloader = new URLClassLoader(new URL[]{                    new File(javaHome + File.separator + ".." + File.separator + "lib" + File.separator + "tools.jar").toURI().toURL()            });            virtualMachine = JVMToolClassloader.loadClass("com.sun.tools.attach.VirtualMachine");            method_AttachToVM = virtualMachine.getMethod("attach", String.class);            method_DetachFromVM = virtualMachine.getMethod("detach");            method_GetAgentProperties = virtualMachine.getMethod("getAgentProperties", (Class[]) null);            method_GetSystemProperties = virtualMachine.getMethod("getSystemProperties", (Class[]) null);            method_LoadAgent = virtualMachine.getMethod("loadAgent", new Class[]{String.class, String.class});            if (null != javaVersion && javaVersion.startsWith("9.")) {                method_StartLocalManagementAgent = virtualMachine.getMethod("startLocalManagementAgent", (Class[]) null);            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static MBeanServer server = ManagementFactory.getPlatformMBeanServer();    public static void main(String[] args) throws MalformedObjectNameException, NullPointerException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {        //create object name        ObjectName helloName = new ObjectName("jmxBean:name=hello");        //create mbean and register mbean        server.registerMBean(new Hello(), helloName);        //create adaptor, adaptor is just a form as show mbean. It has no relation to specific mbean.        HtmlAdaptorServer adaptor = new HtmlAdaptorServer();        //create adaptor name        ObjectName adaptorName = new ObjectName("jmxBean:name=adaptor,port=5050");        //register adaptor and adaptor name        server.registerMBean(adaptor, adaptorName);        adaptor.setPort(9999);        adaptor.start();        System.out.println("....................server start....................");        //JMXConnectorServer service        try {            //这句话非常重要，不能缺少！注册一个端口，绑定url后，客户端就可以使用rmi通过url方式来连接JMXConnectorServer            LocateRegistry.createRegistry(8888);            JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:8888/server");            JMXConnectorServer cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, server);            System.out.println("....................begin rmi start.....");            cs.start();            System.out.println("....................rmi start.....");            Scanner scan = new Scanner(System.in);            System.out.println("输入进程号");            while (true){                String read = scan.nextLine();                if("".equals(read.trim())){                    continue;                }                System.out.println("进程号："+read);                process(read);            }        } catch (MalformedURLException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }    public static void process(String pid){        try {            Object vm = method_AttachToVM.invoke(null, pid);            if (vm != null) {                Properties jvmProperties = (Properties) method_GetAgentProperties.invoke(vm, (Object[]) null);                Properties systemProperties = (Properties) method_GetSystemProperties.invoke(vm, (Object[]) null);                String localConnectorAddress = "com.sun.management.jmxremote.localConnectorAddress";                if (jvmProperties.get(localConnectorAddress) == null) {                    String jversion = (String) systemProperties.get("java.version");                    if (null != jversion && jversion.startsWith("9.")) {                        if (null != method_StartLocalManagementAgent) {                            method_StartLocalManagementAgent.invoke(vm, (Object[]) null);                        }                    } else {                        String agent = systemProperties.getProperty("java.home") + File.separator + "lib" + File.separator                                + "management-agent.jar";                        method_LoadAgent.invoke(vm, agent, "com.sun.management.jmxremote");                    }                    jvmProperties = (Properties) method_GetAgentProperties.invoke(vm, (Object[]) null);                }                method_DetachFromVM.invoke(vm);                String address = (String) jvmProperties.get(localConnectorAddress);                JMXServiceURL jmxUrl = new JMXServiceURL(address);                JMXConnector jmxConnector = JMXConnectorFactory.connect(jmxUrl, null);                MBeanServerConnection mbServerConnection = jmxConnector.getMBeanServerConnection();                ObjectName adaptorName = new ObjectName("jmxBean:name=process");                server.registerMBean(new Hello(), adaptorName);            }        } catch (Exception e) {            e.printStackTrace();        }    }}