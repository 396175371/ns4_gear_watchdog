package com.creditease.ns4.gear.watchdog.monitor.process.shutdown;import com.creditease.ns.log.NsLog;import com.creditease.ns4.gear.watchdog.common.factory.ThreadPoolManager;import com.creditease.ns4.gear.watchdog.common.log.NsLogger;import com.creditease.ns4.gear.watchdog.common.template.TemplateName;import com.creditease.ns4.gear.watchdog.monitor.WatchdogServer;import com.creditease.ns4.gear.watchdog.monitor.notify.NotifyRoute;import com.creditease.ns4.gear.watchdog.monitor.notify.constant.MESSAGE;import com.creditease.ns4.gear.watchdog.monitor.process.ProcessInfo;import com.creditease.ns4.gear.watchdog.monitor.process.WatchdogChildTask;import sun.misc.Signal;import sun.misc.SignalHandler;/** * @author 杨红岩 * @description 关闭进程 * @date 2019/2/28 */public class ShutdownHandler implements SignalHandler {    private static final NsLog logger = NsLogger.getWatchdogLogger();    /**     * 方式一     */    public void registerSignal() {        //注册关闭信号 -> TERM = 15 [kill -15 PID]        Signal.handle(new Signal("TERM"), this);        logger.info("WATCHDOG-进程服务注册关闭信号 TERM=15 [kill -15 PID]");    }    /**     * 处理kill信息     * TODO 需要处理时间范围内未关闭情况     */    @Override    public void handle(Signal signal) {        String name = signal.getName();        logger.warn("WATCHDOG-进程服务执行关闭，准备释放资源，信号 {}", name);        if ("TERM".equals(name)) {            //得到进程信息            ProcessInfo processInfo = WatchdogServer.instance().getWatchdogChildTask().getProcessInfo();            //复制对象 资源释放完成后将使用发送结果            ProcessInfo processInfoClone = (ProcessInfo) processInfo.clone();            logger.warn("WATCHDOG-进程服务执行关闭，释放资源 {}，开始销毁释放资源......", name);            //停止进程            WatchdogChildTask.getInstance().destroy();            //停止所有线程池            ThreadPoolManager.getInstance().shutdown();            //停止通知线程池            NotifyRoute.shutdown();            logger.warn("WATCHDOG-进程服务执行关闭，释放资源 {}，销毁释放资源结束 进程退出.", name);            logger.info("stop watchdog success");            System.out.println("stop watchdog success");            //发送停止成功邮件            NotifyRoute.send(TemplateName.TEMP_NAME_CHAT_PROCESS_STATUS, MESSAGE.TYPE.STOP, processInfoClone, null, false);            System.exit(0);        }    }    /**     * 方式二     */    public static void addShutdownHook() {        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {            @Override            public void run() {                /*                codeing...                 */                System.exit(0);            }        }, "WatchdogHook"));    }}