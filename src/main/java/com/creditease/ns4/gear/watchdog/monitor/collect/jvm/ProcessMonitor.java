package com.creditease.ns4.gear.watchdog.monitor.collect.jvm;import com.alibaba.fastjson.JSONObject;import com.creditease.ns.log.NsLog;import com.creditease.ns4.gear.watchdog.common.*;import com.creditease.ns4.gear.watchdog.common.jvm.report.JVMMonitor;import com.creditease.ns4.gear.watchdog.common.log.NsLogger;import com.creditease.ns4.gear.watchdog.common.monitor.MessageType;import com.creditease.ns4.gear.watchdog.common.monitor.MonitorDataMXBean;import com.creditease.ns4.gear.watchdog.common.template.Template;import com.creditease.ns4.gear.watchdog.common.template.TemplateName;import com.creditease.ns4.gear.watchdog.monitor.WatchdogServer;import com.creditease.ns4.gear.watchdog.monitor.jmx.Jmx;import com.creditease.ns4.gear.watchdog.monitor.process.WatchdogChildTask;import javax.management.MBeanServerConnection;import java.util.HashMap;import java.util.Map;/** * @author 杨红岩 * @description 进程信息采集 * @date 2019/3/7 */public class ProcessMonitor {    private static final NsLog logger = NsLogger.getWatchdogLogger();    private static ProcessMonitor processMonitor = new ProcessMonitor();    public static ProcessMonitor newProcessMonitor() {        return processMonitor;    }    /**     * 采集进程信息并发送通知     */    public void collection() {        try {            //采集进程数据            Map<String, Object> data = new HashMap<>(3);            data.put("nowProcess", null);            data.put("childProcess", null);            data.put("IP", IPUtil.getHostAddress(true, false));            data.put("systemOS", ProcessUtil.getOsName());            data.put("availableProcessors",JVMMonitor.getAvailableProcessors());            Map<String, String> childProcess = this.childProcess();            String nowProcessJSONString = this.nowProcess();            if (nowProcessJSONString != null) {                JSONObject jsonObject = JSONObject.parseObject(nowProcessJSONString);                jsonObject.put("processName", "WATCHDOG");                jsonObject.put("status", "RUN");                jsonObject.put("time", DateUtil.timeToStr(WatchdogServer.instance().getStartTime()));                data.put("nowProcess", jsonObject);            }            if (childProcess != null) {                JSONObject jsonObject = JSONObject.parseObject(childProcess.get("process"));                jsonObject.put("processName", WatchdogChildTask.getInstance().getProcessInfo().getNs4AppConf().getAppName());                jsonObject.put("status", WatchdogChildTask.getInstance().getProcessInfo().getStatus().getValue());                jsonObject.put("time", DateUtil.timeToStr(WatchdogChildTask.getInstance().getProcessInfo().getStartTime()));                data.put("childProcess", jsonObject);                //子进程队列监控数据采集                childProcess.remove("process");                data.put("childProcessQueue", childProcess);            }            //微信通知            String html = Template.render(TemplateName.TEMP_NAME_CHAT_PROCESS_NOTIFY, data);            ChatUtil.send(html);            EmailUtil.send("WatchDog - NS4 进程信息",html);            //logger.info("系统及进程信息: {}", JSON.toJSONString(data));        } catch (Throwable t) {            logger.error(t, "send JVM metrics to Collector fail.");        }    }    /**     * 获取当前进程信息     */    private String nowProcess() {        return JVMMonitor.getData();    }    /**     * 获取子进程信息     */    private Map<String, String> childProcess() throws Exception {        Jmx jmx = Jmx.getInstance().getChildJmx();        if (jmx != null) {            MBeanServerConnection mbsc = jmx.getMbServerConnection();            if (mbsc != null) {                MonitorDataMXBean mdmb = JmxUtil.getMonitorDataMXBean(mbsc);                try {                    Map<String, String> datas = new HashMap<>(3);                    //进程信息                    datas.put("process", mdmb.getMonitorReport());                    //队列信息 - 发送                    datas.put(MessageType.NS_SEND_QUEUE_BUFFER.name(), mdmb.getData(MessageType.NS_SEND_QUEUE_BUFFER.name()));                    ////队列信息 - 接收                    datas.put(MessageType.NS_RECEIVE_QUEUE_BUFFER.name(), mdmb.getData(MessageType.NS_RECEIVE_QUEUE_BUFFER.name()));                    return datas;                } catch (Exception e) {                    //忽略                }            }        }        return null;    }}