package com.creditease.ns4.gear.watchdog.common.jvm;import com.creditease.ns.log.NsLog;import com.creditease.ns4.gear.watchdog.common.log.NsLogger;import javax.management.MBeanServerConnection;import javax.management.remote.JMXConnector;import javax.management.remote.JMXConnectorFactory;import javax.management.remote.JMXServiceURL;import java.io.File;import java.util.HashMap;import java.util.Map;import java.util.Properties;/** * @author 杨红岩 * @description 进程JMX连接 * @date 2019/3/7 */public class ProcessJmx {    private NsLog logger = NsLogger.getWatchdogLogger();    Map<String, Long> checkerEnvMap = new HashMap<String, Long>(1) {        private static final long serialVersionUID = 8032357963181631924L;        {            //设置Checker不需要检测MBeanServer和Client的心跳            this.put("jmx.remote.x.client.connection.check.period", 0L);        }    };    private int pid = 0;    private MBeanServerConnection mbServerConnection = null;    /**     * 获取指定进程MBean server 连接     *     * @param pid 进程PID     * @return MBeanServerConnection     * @throws Exception     */    public MBeanServerConnection getMBeanServerConnection(int pid) throws Exception {        try {            if (this.pid == 0 || this.pid != pid) {                this.pid = pid;                JVMReflex jvmReflex = JVMReflex.newInstance();                Object vm = jvmReflex.getMethodAttachToVM().invoke(null, String.valueOf(pid));                if (vm != null) {                    Properties jvmProperties = (Properties) jvmReflex.getMethodGetAgentProperties().invoke(vm, (Object[]) null);                    Properties systemProperties = (Properties) jvmReflex.getMethodGetSystemProperties().invoke(vm, (Object[]) null);                    String localConnectorAddress = "com.sun.management.jmxremote.localConnectorAddress";                    if (jvmProperties.get(localConnectorAddress) == null) {                        String jversion = (String) systemProperties.get("java.version");                        if (null != jversion && jversion.startsWith("9.")) {                            if (null != jvmReflex.getMethodStartLocalManagementAgent()) {                                jvmReflex.getMethodStartLocalManagementAgent().invoke(vm, (Object[]) null);                            }                        } else {                            String agent = systemProperties.getProperty("java.home") + File.separator + "lib" + File.separator + "management-agent.jar";                            jvmReflex.getMethodLoadAgent().invoke(vm, agent, "com.sun.management.jmxremote");                        }                        jvmProperties = (Properties) jvmReflex.getMethodGetAgentProperties().invoke(vm, (Object[]) null);                    }                    jvmReflex.getMethodDetachFromVM().invoke(vm);                    String address = (String) jvmProperties.get(localConnectorAddress);                    JMXServiceURL jmxUrl = new JMXServiceURL(address);                    JMXConnector jmxConnector = JMXConnectorFactory.connect(jmxUrl, checkerEnvMap);                    this.mbServerConnection = jmxConnector.getMBeanServerConnection();                }            }        } catch (Exception e) {            this.mbServerConnection = null;            logger.error("获取进程JMX连接异常：{} {}", e.getMessage(), e);            throw e;        }        return this.mbServerConnection;    }}