package com.creditease.ns4.gear.watchdog.monitor.process;import com.creditease.ns.log.NsLog;import com.creditease.ns4.gear.watchdog.common.log.NsLogger;import com.creditease.ns4.gear.watchdog.monitor.process.constant.PROCES;import java.util.HashMap;/** * @author 杨红岩 * @description Watchdog管理 * @date 2019/1/23 */public class WatchdogManager {    private static final NsLog logger = NsLogger.getWatchdogLogger();    /**     * 子进程集合     */    private HashMap<String, WatchdogChildTask> _watchdogMap = new HashMap<String, WatchdogChildTask>();    private static WatchdogManager watchdogManager = null;    public static WatchdogManager getInstance() {        if (watchdogManager == null) {            watchdogManager = new WatchdogManager();        }        return watchdogManager;    }    /**     * 移除指定的子进程     *     * @param appName 应用名称(进程名称)     * @param args    参数     */    public void remove(String appName, String[] args) {        if (appName == null || "".equals(appName.trim())) {            appName = PROCES.APP_NAME_DEFAULT;        }        //app是否已经存在        if (this._watchdogMap.containsKey(appName)) {            WatchdogChildTask watchdogChildTask = this._watchdogMap.get(appName);            //判断app状态            if (PROCES.STATUS.STOP != watchdogChildTask.getProcessInfo().getStatus()) {                logger.info("应用{}是【{}】状态移除失败，确保应用进程已经停止", appName, watchdogChildTask.getProcessInfo().getStatus().getValue());                return;            } else {                watchdogChildTask.clear(null);                watchdogChildTask = null;                this._watchdogMap.remove(appName);            }        } else {            logger.info("应用{}不存在", appName);        }    }    /**     * 停止指定的子进程     *     * @param appName 应用名称(进程名称)     * @param args    参数     */    public void stop(String appName, String[] args) {        if (appName == null || "".equals(appName.trim())) {            appName = PROCES.APP_NAME_DEFAULT;        }        //app是否已经存在        if (this._watchdogMap.containsKey(appName)) {            WatchdogChildTask watchdogChildTask = this._watchdogMap.get(appName);            logger.info("应用【{}】，状态【{}】", appName, watchdogChildTask.getProcessInfo().getStatus().getValue());            watchdogChildTask.stop();        } else {            logger.info("应用【{}】不存在", appName);        }    }    /**     * 启动指定的子进程     *     * @param appName 应用名称(进程名称)     * @param args    参数     */    public void start(String appName, String[] args) {        if (appName == null || "".equals(appName.trim())) {            appName = PROCES.APP_NAME_DEFAULT;        }        //app是否已经存在        if (this._watchdogMap.containsKey(appName)) {            WatchdogChildTask watchdogChildTask = this._watchdogMap.get(appName);            logger.info("应用【{}】，状态【{}】", appName, watchdogChildTask.getProcessInfo().getStatus().getValue());            watchdogChildTask.start();        } else {            logger.info("应用【{}】不存在", appName);        }    }    /**     * 重启指定的子进程     *     * @param args 参数     */    public void restart(String[] args) {        //CommandLine commandLine = CommandLine.parse(args);        String appName = null;        if (appName == null || "".equals(appName.trim())) {            appName = PROCES.APP_NAME_DEFAULT;        }        //app是否已经存在        if (this._watchdogMap.containsKey(appName)) {            WatchdogChildTask watchdogChildTask = this._watchdogMap.get(appName);            logger.info("应用【{}】，状态【{}】", appName, watchdogChildTask.getProcessInfo().getStatus().getValue());            watchdogChildTask.restart();        } else {            logger.info("应用【{}】不存在", appName);        }    }    /**     * 启动所有应用     *     * @param args 参数     */    public void startAll(String[] args) {    }    /**     * 通过配置文件读取应用并添加启动     *     * @param args 参数     */    public void config(String[] args) {    }    /**     * 初始化应用     *     * @param args 参数     */    public void init(String[] args) {        String appName = null;        if (appName == null || "".equals(appName.trim())) {            appName = PROCES.APP_NAME_DEFAULT;        }        //app是否已经存在        if (this._watchdogMap.containsKey(appName)) {            WatchdogChildTask watchdogChildTask = this._watchdogMap.get(appName);            //判断app状态            if (PROCES.STATUS.STOP != watchdogChildTask.getProcessInfo().getStatus()) {                logger.info("应用【{}】已经是【{}】状态", appName, watchdogChildTask.getProcessInfo().getStatus().getValue());                return;            } else {                watchdogChildTask.start();            }        } else {            //app不存在时，创建一个新的watchdog child task            //并立即启动            WatchdogChildTask watchdogChildTask = new WatchdogChildTask();            this._watchdogMap.put(appName, watchdogChildTask);            watchdogChildTask.init();        }    }}