package com.creditease.ns4.gear.watchdog.monitor.process;import com.creditease.ns4.gear.watchdog.monitor.process.config.NS4AppConf;import com.creditease.ns4.gear.watchdog.monitor.process.constant.ExitCode;import com.creditease.ns4.gear.watchdog.monitor.process.constant.PROCES;/** * @author 杨红岩 * @description 进程信息 * @date 2019/1/16 */public class ProcessInfo implements Cloneable {    /**     * 进程id     */    private int pid;    /**     * 父进程id     */    private int ppid;    /**     * ping使用的socket端口     */    private int pingPort;    /**     * 应用启动入口     */    private String appMain;    /**     * 进程状态     */    private int processStatus = -1;    /**     * 启动状态 -> -1停止，0启动中，1启动成功     */    private PROCES.STATUS status = PROCES.STATUS.STOP;    /**     * 启动时间     */    private long startTime;    /**     * 停止时间     */    private long stopTime;    /**     * 进程退出码     */    private ExitCode exitCode;    /**     * 进程退出信息     */    private String exitMessage;    /**     * ns4配置信息     */    private NS4AppConf ns4AppConf;    public String getAppMain() {        return appMain;    }    public void setAppMain(String appMain) {        this.appMain = appMain;    }    public int getPingPort() {        return pingPort;    }    public void setPingPort(int pingPort) {        this.pingPort = pingPort;    }    public int getPpid() {        return ppid;    }    public void setPpid(int ppid) {        this.ppid = ppid;    }    public int getPid() {        return pid;    }    public void setPid(int pid) {        this.pid = pid;    }    public int getProcessStatus() {        return processStatus;    }    public void setProcessStatus(int processStatus) {        this.processStatus = processStatus;    }    public PROCES.STATUS getStatus() {        return status;    }    public void setStatus(PROCES.STATUS status) {        this.status = status;    }    public long getStartTime() {        return startTime;    }    public void setStartTime(long startTime) {        this.startTime = startTime;    }    public long getStopTime() {        return stopTime;    }    public void setStopTime(long stopTime) {        this.stopTime = stopTime;    }    public ExitCode getExitCode() {        return exitCode;    }    public void setExitCode(ExitCode exitCode) {        this.exitCode = exitCode;    }    public String getExitMessage() {        return exitMessage;    }    public void setExitMessage(String exitMessage) {        this.exitMessage = exitMessage;    }    public NS4AppConf getNs4AppConf() {        return ns4AppConf;    }    public void setNs4AppConf(NS4AppConf ns4AppConf) {        this.ns4AppConf = ns4AppConf;    }    @Override    public Object clone() {        ProcessInfo processInfo = null;        try {            processInfo = (ProcessInfo) super.clone();            processInfo.setNs4AppConf((NS4AppConf) this.ns4AppConf.clone());        } catch (CloneNotSupportedException e) {        }        return processInfo;    }}