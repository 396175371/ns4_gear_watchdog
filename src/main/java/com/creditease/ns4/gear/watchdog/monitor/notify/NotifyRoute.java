package com.creditease.ns4.gear.watchdog.monitor.notify;import com.creditease.ns4.gear.watchdog.common.*;import com.creditease.ns4.gear.watchdog.common.template.Template;import com.creditease.ns4.gear.watchdog.monitor.notify.constant.MESSAGE;import com.creditease.ns4.gear.watchdog.monitor.process.ProcessInfo;import java.util.HashMap;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;/** * @author 杨红岩 * @description 通知路由 * @date 2019/3/6 */public class NotifyRoute {    /**     * 通知频率阀值 - 单位：秒     */    final static int NOTIFY_THRESHOLD = 10;    /**     * 通知频率类型     */    private final static Map<MESSAGE.TYPE, NotifyFrequency> NOTIFY_FREQUENCY_TYPE = new ConcurrentHashMap<MESSAGE.TYPE, NotifyFrequency>(MESSAGE.TYPE.values().length) {        private static final long serialVersionUID = 6139246808043946755L;        {            this.put(MESSAGE.TYPE.START, new NotifyFrequency());            this.put(MESSAGE.TYPE.STOP, new NotifyFrequency());            this.put(MESSAGE.TYPE.ERROR, new NotifyFrequency());        }    };    /**     * 路由发送     *     * @param templateName 模板名称     * @param sendType     发送类型     * @param processInfo  进程信息     * @param errorMsg     错误信息     */    public static void send(String templateName, MESSAGE.TYPE sendType, ProcessInfo processInfo, String errorMsg) {        send(templateName, sendType, processInfo, errorMsg, true);    }    /**     * 路由发送     *     * @param templateName 模板名称     * @param sendType     发送类型     * @param processInfo  进程信息     * @param errorMsg     错误信息     */    public static void send(String templateName, MESSAGE.TYPE sendType, ProcessInfo processInfo, String errorMsg, boolean isAsyn) {        //获得当前通知的进程通知频率        NotifyFrequency notifyFrequency = NOTIFY_FREQUENCY_TYPE.get(sendType);        if (notifyFrequency == null || processInfo == null) {            return;        }        //判断是否操作的当前进程        if (notifyFrequency.pid != processInfo.getPid()) {            //不是当前进程重置            notifyFrequency.reset();        }        long nowDate = System.currentTimeMillis();        if (notifyFrequency.beforDate == 0L) {            notifyFrequency.beforDate = nowDate;        }        if (notifyFrequency.pid == 0) {            notifyFrequency.pid = processInfo.getPid();        }        notifyFrequency.count++;        long cDate = nowDate - notifyFrequency.beforDate;        String frequency = null;        //不等于0说明连续发送        if (cDate != 0) {            //判断时间差，大于【NOTIFY_THRESHOLD】秒发送一次，控制发送频率            if (cDate > 1000 * NOTIFY_THRESHOLD) {                frequency = (cDate / 1000) + "秒内,次数" + notifyFrequency.count;                //达到阀值重置                notifyFrequency.reset();            } else {                return;            }        }        //邮件通知        Map<String, Object> data = new HashMap<>();        data.put("systemOS", ProcessUtil.getOsName());        data.put("processName", processInfo.getNs4AppConf().getAppName());        data.put("processPid", processInfo.getPid());        data.put("IP", IPUtil.getHostAddress(true, false));        data.put("time", DateUtil.timeToStr(processInfo.getStartTime()));        data.put("errorMsg", errorMsg);        data.put("type", sendType.getValue());        data.put("frequency", frequency);        //渲染模板        String processMonitorHtml = Template.render(templateName, data);        //邮件通知        String title = "WatchDog - NS4【" + processInfo.getNs4AppConf().getAppName() + "服务】 -【" + sendType + "】";        EmailUtil.send(title, processMonitorHtml, isAsyn);        //微信通知        ChatUtil.send(processMonitorHtml, isAsyn);    }    /**     * 停止邮件和微信通知线程池     */    public static void shutdown() {        EmailUtil.shutdown();        ChatUtil.shutdown();    }    /**     * 通知频率     */    static class NotifyFrequency {        int count = 0;        long beforDate = 0L;        int pid = 0;        /**         * 重置数值         */        void reset() {            this.count = 0;            this.beforDate = 0L;            this.pid = 0;        }    }}